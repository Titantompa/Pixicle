{"name":"Pixicle","tagline":"","body":"### What is Pixicle\r\nPixicle is a concept based on the WiFi enabled devices of [Particle Industries](http://www.particle.io) in combination with a strip of programmable LEDs (e g WS2811 and derivatives), commonly referred to as NeoPixels (a brand used by [Adafruit](https://www.adafruit.com/) for their programmable LED strips).\r\n\r\nA Pixicle is in essence a cloud-connected microcontroller driving a strip of LEDs. The firmware is an extendable framework addressable through a generic and cloud-based interface. The applications range from simple ambient mood lightning (controller by the accompanying Android application) to more elaborate IoT-configurations where the lights could be used to indicate events, progress or various metrics.\r\n\r\n### What do you need\r\nIn order to build a Pixicle you need five major components:\r\n\r\n* **A Particle device** (Core or Photon).  \r\n      Available from multiple sources, world-wide. For prototyping purposes a Photon kit (with breadboard) is recommended.\r\n\r\n* **A LED Strip** (e g WS2812B et al).  \r\n      Also available in vast variations from more or less reputable world-wide distributors.\r\n    \r\n* **A logic level converter**  \r\n      The microcontroller uses 3.3V logic while the LEDs use 5V. This could be a custom converter (built on a fast 74125 logic chip or an optocoupler if isolation is needed) or a product such as [http://www.sparkfun.com](Sparkfun's)'s [Logic Level Converter](https://www.sparkfun.com/products/12009).\r\n\r\n* **A Power Supply**  \r\n       While the microcontroller doesn't require much, each of the LEDs could peak at 0.3W. This quickly sums up to boggling levels of current.   \r\n       The Particle devices feature an on-board regulator which makes it possible to drive both the microcontroller and LED-strip from the same 5 Volt power supply. Note that the LED-strips themselves are measly conductors and that you'd probably want to connect the power supply at more than one place if the strip exceeds about five metres.\r\n\r\nApart from these requisites you would also need some form of fixture to mount the components to, obviously.\r\n\r\n### Required skills\r\nEven though you'd get very far with a breadboard you will most likely need a soldering iron and some rudimentary skills to get all the connectors and wires to hook up properly.\r\n\r\nIf you want to add modes and functionality to either the microcontroller or the Android application you need programming skills. The microntroller is programmed using C++ while the Android application is Java.\r\n\r\nTo produce something beyond a prototype (even if it is just a one-off device) you will also need some mechanical and general fiddling skills (along with appropriate tools).\r\n\r\n### Required Software Tools\r\nThe Android app is build using the [Android Studio](https://developer.android.com/sdk/index.html) while the firmware for the Particle devices is built using [Particle Dev](https://www.particle.io/dev).\r\n\r\n### Authors and Contributors\r\nThe Android app and Particle firmware was originally written by Tomas HÃ¼bner (@titantompa). The work started during the Christmas holidays 2014 and was completed during the same holidays a year later (2015).\r\nThe Android app uses a color picker written by @LarsWerkman and the firmware uses a library to communicate with the NeoPixels adapted to the Particle devices by @technobly.\r\n\r\n### Useful Links\r\nhttp://www.particle.io    \r\nhttp://www.particle.io/dev    \r\nhttps://learn.adafruit.com/adafruit-neopixel-uberguide   \r\nhttps://ifttt.com/maker    \r\nhttp://www.newark.com/pdfs/techarticles/microchip/3_3vto5vAnalogTipsnTricksBrchr.pdf    ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}